{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/Mlb/Mlb.js","components/Nba/Nba.js","components/Nhl/Nhl.js","components/Lander/Lander.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","react_router_dom","to","React","Component","Footer","Date","getFullYear","this","getYear","Lander","state","data","src","frameborder","allow","allowfullscreen","App","react_router","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SA0DeA,gMAlDX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,0CACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KACPL,EAAAC,EAAAC,cAAA,MAAIC,UAAW,eAAeH,EAAAC,EAAAC,cAAA,QAAMC,UAAW,eAAjB,UAA6CH,EAAAC,EAAAC,cAAA,QAAMC,UAAW,YAAjB,KAAqCH,EAAAC,EAAAC,cAAA,QAAMC,UAAW,cAAjB,qBARrGG,IAAMC,0ICoBZC,GCdGF,IAAMC,iBCHND,IAAMC,iBCAND,IAAMC,mMHApB,OAAO,IAAIE,MAAOC,+CAIlB,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,sDACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,qBAAiDQ,KAAKC,qBAX7CN,IAAMC,YI0BZM,UC1BIP,IAAMC,4NDArBO,MAAQ,CACPC,KAAM,8EAKP,OACAf,EAAAC,EAAAC,cAAA,OAAKC,UAAW,oBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,cACdH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,sDACAF,EAAAC,EAAAC,cAAA,mEACAF,EAAAC,EAAAC,cAAA,kFACAF,EAAAC,EAAAC,cAAA,uEAIPF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,mBACfH,EAAAC,EAAAC,cAAA,UAAQc,IAAI,gEAAgEC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,aApB5Kb,IAAMC,YE0DZa,6MA/CbN,MAAQ,CACNC,KAAM,8EAuBN,OACAf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACAJ,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWxB,IAC3BC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOG,OAAK,EAACF,KAAK,IAAIC,UAAWV,IAW7Bb,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWf,aAxCjBD,aCFEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb5a73f5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../Header/Header.css\";\nimport { Link } from \"react-router-dom\";\n\n\nclass Header extends React.Component {\n  \n  render() {\n    return (\n      <div className={\"header\"}>\n      <div className={\"row\"}>\n      <div className={\"col-xs-12 col-s-12 col-md-12 col-lg-12\"}>\n        <Link to=\"/\">\n          <h1 className={\"header-logo\"}><span className={\"sports-head\"}>Sports</span><span className={\"dot-head\"}>.</span><span className={\"money-head\"}>money</span></h1>\n        </Link>\n      </div>\n      </div>\n      {/* <div className={\"row\"}>\n      <div className={\"col-xs-12 col-s-12 col-md-12 col-lg-12\"}>\n      <ul className={\"nav nav-tabs\"}>\n      <Link to=\"/\">\n        <li className={\"nav-item\"} id={\"homeLinkHead\"}>\n          <span className={\"nav-link\"}>Home</span>\n        </li>\n      </Link>\n        <li className={\"nav-item dropdown\"}>\n          <span className={\"nav-link dropdown-toggle\"} data-toggle={\"dropdown\"} role={\"button\"} aria-haspopup={\"true\"} aria-expanded={\"false\"}>Odds</span>\n            <div className={\"dropdown-menu dropdown-menu-odds\"}>\n            <Link to=\"/odds\">\n              <span className={\"dropdown-item\"}><span id={\"odds\"}>All Odds</span></span>\n            </Link>\n              <div className={\"dropdown-divider\"}></div>\n              <Link to=\"/odds/NBA\">\n              <span className={\"dropdown-item\"}>NBA</span>\n              </Link>\n              <Link to=\"/odds/NHL\">\n              <span className={\"dropdown-item\"}>NHL</span>\n              </Link>\n              <Link to=\"/odds/MLB\">\n              <span className={\"dropdown-item\"}>MLB</span>\n              </Link>\n            </div>\n        </li>\n        <li className={\"nav-item\"}>\n          <span className={\"nav-link\"} href={\"#\"}>Free Picks</span>\n        </li>\n        <li className={\"nav-item\"}>\n          <span className={\"nav-link\"} href={\"#\"} tabIndex={\"-1\"} aria-disabled={\"true\"}>Buy Picks</span>\n        </li>\n      </ul>\n      </div>\n      </div> */}\n      </div>\n    );\n  }\n  \n}\n\nexport default Header;","import React from \"react\";\nimport \"../Footer/Footer.css\";\n// import axios from \"axios\";\n\n\nclass Footer extends React.Component {\n\n  getYear() {\n    return new Date().getFullYear();\n  }\n\n  render() {\n    return (\n      <div className={\"footer\"}>\n        <div className={\"row\"}>\n          <div className={\"col-xs-12 col-sm-12 col-md-12 -col-lg-12 col-xl-12\"}>\n            <h3 className=\"copyright-footer\">Â© Sports.money {this.getYear()}</h3>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default Footer;","import React from \"react\";\nimport \"../Mlb/Mlb.css\";\nimport axios from \"axios\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport isEqual from 'lodash/isEqual';\nimport map from 'lodash/map';\nimport differenceWith from 'lodash/differenceWith';\nimport md5 from 'md5';\n\n\nclass Mlb extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state= {value: \"moneyline\",}\n    this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n      this.getMlbData();\n    }\n\n    createLineCheckSum = (homeTeam, awayTeam, date, affiliate) => {\n      return `item_${md5(\n        `${homeTeam}${awayTeam}${date}${affiliate}`\n      )}`;\n    }\n\n    getMlbData = () => {\n      // setInterval(() => {\n      console.log(\"state\", this.state)\n      console.log(\"mlb props\", this.props)\n      axios.get(\"/api/mlb-odds\").then((res) => {\n        let arrayOfEvents = []\n        const parsed = JSON.parse(JSON.stringify(res)).data.body.events\n        // console.log(\"parsed data\", parsed);\n        for (let i = 0; i < parsed.length; i++) {\n          const teamObject = {};\n          const linesObj = parsed[i].lines;\n          const linesArr = Object.values(linesObj);\n          const dateParse = parsed[i].event_date;\n          const dateToFormat = new Date(dateParse);\n          // GETTING EVENT DATE FOR GAME\n          for (let k = 0; k < parsed[i].teams.length; k++) {\n            const isAway = parsed[i].teams[k].is_away;\n            const eachTeam = parsed[i].teams[k].name;  \n            // PUTTING TEAMS IN OBJ\n            isAway ? teamObject.away = {away_team: eachTeam} : teamObject.home = {home_team: eachTeam}\n          }\n           teamObject.date = {\n            event_date: <Moment format=\"MMM D, h:mm A\" date={dateToFormat} />\n          }\n          console.log(teamObject.date, \"date TO\")\n          console.log(teamObject, \"team obj\")\n          for (let j = 0; j < linesArr.length; j++) {\n            teamObject.lines = [\n              {\n               affiliate: linesArr[0].affiliate.affiliate_name,\n               moneyline_away: linesArr[0].moneyline.moneyline_away,\n               moneyline_home: linesArr[0].moneyline.moneyline_home,\n               spread_away: linesArr[0].spread.point_spread_away,\n               spread_home: linesArr[0].spread.point_spread_home,\n               total: linesArr[0].total.total_over,\n               checksum: this.createLineCheckSum(\n                 teamObject.homeTeam, teamObject.awayTeam, teamObject.date, linesArr[0].affiliate.affiliate_name\n               )\n              },\n              {\n                affiliate: linesArr[1].affiliate.affiliate_name,\n                moneyline_away: linesArr[1].moneyline.moneyline_away,\n                moneyline_home: linesArr[1].moneyline.moneyline_home,\n                spread_away: linesArr[1].spread.point_spread_away,\n                spread_home: linesArr[1].spread.point_spread_home,\n                total: linesArr[1].total.total_over,\n                checksum: this.createLineCheckSum(\n                  teamObject.homeTeam, teamObject.awayTeam, teamObject.date, linesArr[1].affiliate.affiliate_name\n                ),\n              },\n              {\n                affiliate: linesArr[4].affiliate.affiliate_name,\n                moneyline_away: linesArr[4].moneyline.moneyline_away,\n                moneyline_home: linesArr[4].moneyline.moneyline_home,\n                spread_away: linesArr[4].spread.point_spread_away,\n                spread_home: linesArr[4].spread.point_spread_home,\n                total: linesArr[4].total.total_over,\n                checksum: this.createLineCheckSum(\n                  teamObject.homeTeam, teamObject.awayTeam, teamObject.date, linesArr[4].affiliate.affiliate_name\n                ),\n              },\n          ]\n      \n        }\n        \n          arrayOfEvents.push(teamObject)\n        }\n          this.setState({arrayOfEvents});\n      });\n    // }, 30000);\n    }\n\n    handleChange(event) {\n      this.setState({value: event.target.value});\n      event.preventDefault();\n    }\n\n    applyHightlight(id) {\n      const element = document.querySelector(\"#\" + id);\n      if (!element) {\n        return;\n      }\n      element.classList.add(\"highlight-me\");\n      setInterval(() => {\n        element.remove(\"highlight-me\");\n      }\n      , 9000);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      console.log(\"current state\", this.state);\n      console.log(\"prev state\", prevState);\n\n      const currentLines = map(this.state.arrayOfEvents, \"lines\");\n      const previousLines = map(prevState.arrayOfEvents, \"lines\");\n      // TODO: Confirm that isEquals is working as expected\n      const linesDiff = differenceWith(currentLines, previousLines, isEqual) || [];\n\n      currentLines.forEach((line, lineIndex) => {\n        line.forEach((item, itemIndex) => {\n            this.applyHightlight(item.checksum);\n            console.log(`ITEM CHECKSUM AND ID IS: ${item.checksum}`);\n            return\n        });\n      });\n    \n\n      if (!linesDiff.length || !prevState.arrayOfEvents) {\n        console.log(\"Everthing is the same\") \n        return\n      }\n\n    \n      \n      for (let line in linesDiff){\n        for (let item in line) {\n          this.applyHightlight(item.checksum);\n        }   \n      }\n\n      /* this.state.arrayOfEvents.map((eachList, i) => {\n        // console.log(\"each list\", eachList);\n        const newLines = eachList.lines;\n        // console.log(\"new lines\", newLines);\n        // const currentStateVals = liness.filter(function(liness)\n          prevState.arrayOfEvents ?  prevState.arrayOfEvents.map((prevList, k) => {\n          //  console.log(\"prev state inner\", prevState);\n          // console.log(\"prev list\", prevList);\n          const prevLines= prevList.lines;\n          // console.log(\"prevLines\", prevLines)\n          // console.log(\"new lines inner\", newLines);\n          // newLines[i] !== prevLines[k] ? console.log(\"something is DIFFERENT\") : console.log(\"nothing changed yet\")\n          // console.log(\"lines at index\", newLines[0]);\n        }) : console.log(\"no prev state yet\")\n\n      })*/\n\n    }\n\n\n  render() {\n    return (\n      <div className={\"mlb-container\"}>\n        <div className={\"row\"}>\n          <div className={\"col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12\"}>\n            <div className={\"grid-container\"}>\n            <div className={\"row league-row\"}>\n                <div className={\"col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6\"}>\n                  <div className={\"league-info\"}>\n                      <img className={\"league-logo\"} src={\"https://thekingmaker.me/wp-content/uploads/2016/01/Major-League-Baseball.png\"} alt={\"mlb_logo\"}></img>\n              \n                  </div>\n                </div>\n                <div className={\"col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6\"}>\n                <a className={\"mlbRefresh\"} href='javascript:void(0)' onClick={this.getMlbData}><img className={\"mlbRefresh\"} src={\"../../../../images/refresh.png\"} alt={\"refresh\"}></img></a>\n      <div className={\"oddSelect-container\"}>\n      <select className={\"selector-dropdown\"} id={\"mlbSelectDD\"} value={this.state.value} onChange={this.handleChange} >\n        <option selected value=\"moneyline\">Moneyline</option>\n        <option value=\"spread\">Spread</option>\n        <option value=\"total\">Total</option>\n        {console.log(\"value state change MLB\", this.state)}\n        {/* {this.props = this.state.value} */}\n        {/* {console.log(\"props\", this.props)} */}\n      </select>\n      </div>\n               {/* <a className={\"refreshBut\"} href='javascript:void(0)' onClick={this.getMlbData}><img className={\"refreshBut\"} src={\"../../../../images/refresh.png\"} alt={\"refresh\"}></img></a> */}\n                </div> \n            </div>\n              <table className={\"table table-bordered\"}>\n                  <thead  className={\"headers-row\"}>\n                    <tr>\n                  <th>\n                  <span className={\"team-info\"}>Time</span>\n                  </th>\n                  <th>\n                    <span className={\"team-info\"}>Teams</span>\n                  </th>\n                    <th className={\"book-headers\"} id={\"fiveDimesHead\"}>\n                    <img src={\"../../../../images/5dimeslogo.png\"} className={\"bookie-logos\"} alt={\"5dimes-Logo\"}></img>\n                    </th>\n                    <th className={\"book-headers\"} id={\"pinnacleHead\"}>\n                    <img src={\"../../../../images/pinnacle-logo.png\"} className={\"bookie-logos\"} alt={\"Pinnacle-Logo\"}></img>\n                    </th>\n                    <th className={\"book-headers\"} id={\"bookmakerHead\"}>\n                    <img src={\"../../../../images/logo-bookmaker.png\"} className={\"bookie-logos\"} alt={\"Bookmaker-Logo\"}></img>\n                    </th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  {console.log(\"inner\", this.state)}\n\n                      {\n                        this.state.arrayOfEvents === undefined || this.state.arrayOfEvents.length === 0 ?\n                          <tr  className={\"loader\"}><td>Loading</td></tr> : this.state.value === \"moneyline\" && this.state.arrayOfEvents.map((index, i) => {\n                            return [\n                            <tr key={i}>\n                            <td className={\"live-time\"}>{index.date.event_date}</td>\n                            <td className={\"live-teams\"}><span className={\"marker\"}>Home: </span>{index.home.home_team}<br></br><span className={\"marker\"}>Away: </span>{index.away.away_team}</td>\n                              <td id={index.lines[0].checksum} className={\"live-open-line\"}><span className={\"marker\"}>Moneyline-Home: </span>{index.lines[0].moneyline_home}<br></br><span className={\"marker\"}>Moneyline-Away: </span>{index.lines[0].moneyline_away}\n                              </td>\n                              <td id={index.lines[1].checksum} className={\"live-open-line\"}><span className={\"marker\"}>Moneyline-Home: </span>{index.lines[1].moneyline_home}<br></br><span className={\"marker\"}>Moneyline-Away: </span>{index.lines[1].moneyline_away}\n                              </td>\n                              <td id={index.lines[2].checksum} className={\"live-open-line\"}><span className={\"marker\"}>Moneyline-Home: </span>{index.lines[2].moneyline_home}<br></br><span className={\"marker\"}>Moneyline-Away: </span>{index.lines[2].moneyline_away}\n                              </td>                          \n                            </tr>\n                            ]\n                          })\n                        }\n\n                      {\n                        this.state.arrayOfEvents === undefined || this.state.arrayOfEvents.length ===0 ?\n                          <tr  className={\"loader\"}><td>Loading</td></tr> : this.state.value === \"spread\" && this.state.arrayOfEvents.map((index, j) => {\n                            return [\n                            <tr key={j}>\n                            <td className={\"live-time\"}>{index.date.event_date}</td>\n                            <td className={\"live-teams\"}><span className={\"marker\"}>Home: </span>{index.home.home_team}<br></br><span className={\"marker\"}>Away: </span>{index.away.away_team}</td>\n                              <td id={\"fiveDimesSpread\"} className={\"live-open-line\"}><span className={\"marker\"}>Spread Home: </span>{index.lines[0].spread_home}<br></br><span className={\"marker\"}>Spread Away: </span>{index.lines[0].spread_away}\n                              </td>\n                              <td id={\"pinnacleSpread\"} className={\"live-open-line\"}><span className={\"marker\"}>Spread Home: </span>{index.lines[1].spread_home}<br></br><span className={\"marker\"}>Spread Away: </span>{index.lines[1].spread_away}\n                              </td>\n                              <td id={\"bookmakerSpread\"} className={\"live-open-line\"}><span className={\"marker\"}>Spread Home: </span>{index.lines[2].spread_home}<br></br><span className={\"marker\"}>Spread Away: </span>{index.lines[2].spread_away}\n                              </td>                          \n                            </tr>  \n                            ]\n                          })\n                        }\n\n                      {\n                        this.state.arrayOfEvents === undefined || this.state.arrayOfEvents.length ===0 ?\n                          <tr  className={\"loader\"}><td>Loading</td></tr> : this.state.value === \"total\" && this.state.arrayOfEvents.map((index, k) => {\n                            return [\n                            <tr key={k}>\n                            <td className={\"live-time\"}>{index.date.event_date}</td>\n                            <td className={\"live-teams\"}><span className={\"marker\"}>Home: </span>{index.home.home_team}<br></br><span className={\"marker\"}>Away: </span>{index.away.away_team}</td>\n                              <td id={\"fiveDimesTotal\"} className={\"live-open-line\"}><span className={\"marker\"}>Total: </span>{index.lines[0].total}\n                              </td>\n                              <td id={\"pinnacleTotal\"} className={\"live-open-line\"}><span className={\"marker\"}>Total: </span>{index.lines[1].total}\n                              </td>\n                              <td id={\"bookmakerTotal\"} className={\"live-open-line\"}><span className={\"marker\"}>Total: </span>{index.lines[2].total}\n                              </td>                          \n                            </tr>  \n                            ]\n                          })\n                        }\n                  </tbody>\n                </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Mlb","import React from \"react\";\nimport \"../Nba/Nba.css\";\nimport axios from \"axios\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\n\n\nclass Nba extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state= {value: \"moneyline\",}\n    this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n      this.getNbaData();\n    }\n\n    getNbaData = () => {\n      axios.get(\"/api/nba-odds\").then((res) => {\n        let arrayOfEvents = []\n        const parsed = JSON.parse(JSON.stringify(res)).data.body.events\n        console.log(\"parsed data\", parsed);\n        for (let i = 0; i < parsed.length; i++) {\n          const teamObject = {};\n          const linesObj = parsed[i].lines;\n          const linesArr = Object.values(linesObj);\n          const testVal = 0;\n          const dateParse = parsed[i].event_date;\n          const dateToFormat = new Date(dateParse);\n          // GETTING EVENT DATE FOR GAME\n           teamObject.date = {\n            event_date: <Moment format=\"MMM D, h:mm A\" date={dateToFormat} />\n          }\n          teamObject.test = {\n            testValue: testVal\n          }\n          for (let j = 0; j < linesArr.length; j++) {\n            teamObject.lines = [\n              {\n               affiliate: linesArr[0].affiliate.affiliate_name,\n               moneyline_away: linesArr[0].moneyline.moneyline_away,\n               moneyline_home: linesArr[0].moneyline.moneyline_home,\n               spread_away: linesArr[0].spread.point_spread_away,\n               spread_home: linesArr[0].spread.point_spread_home,\n               total: linesArr[0].total.total_over\n              },\n              {\n                affiliate: linesArr[1].affiliate.affiliate_name,\n                moneyline_away: linesArr[1].moneyline.moneyline_away,\n                moneyline_home: linesArr[1].moneyline.moneyline_home,\n                spread_away: linesArr[1].spread.point_spread_away,\n                spread_home: linesArr[1].spread.point_spread_home,\n                total: linesArr[1].total.total_over\n              },\n              {\n                affiliate: linesArr[4].affiliate.affiliate_name,\n                moneyline_away: linesArr[4].moneyline.moneyline_away,\n                moneyline_home: linesArr[4].moneyline.moneyline_home,\n                spread_away: linesArr[4].spread.point_spread_away,\n                spread_home: linesArr[4].spread.point_spread_home,\n                total: linesArr[4].total.total_over\n              },\n          ]\n            for (let k = 0; k < parsed[i].teams.length; k++) {\n            const isAway = parsed[i].teams[k].is_away;\n            const eachTeam = parsed[i].teams[k].name;  \n            // PUTTING TEAMS IN OBJ\n            isAway ? teamObject.away = {away_team: eachTeam} : teamObject.home = {home_team: eachTeam}\n          }\n        }\n          arrayOfEvents.push(teamObject)\n        }\n        this.setState({arrayOfEvents});\n      });\n    }\n\n    handleChange(event) {\n      this.setState({value: event.target.value});\n      event.preventDefault();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      const prevStateVals = []; \n      console.log(\"current state\", this.state.arrayOfEvents);\n      console.log(\"prev state\", prevState);\n      if (this.state.arrayOfEvents === prevState.arrayOfEvents) {\n        console.log(\"Everthing is the same\") \n      } else {\n        this.state.arrayOfEvents.map((eachList, i) => {\n          // console.log(\"each list\", eachList);\n          const newLines = eachList.lines;\n          console.log(\"new lines\", newLines);\n          // const currentStateVals = liness.filter(function(liness)\n           prevState.arrayOfEvents ?  prevState.arrayOfEvents.map((prevList, k) => {\n            //  console.log(\"prev state inner\", prevState);\n            // console.log(\"prev list\", prevList);\n            const prevLines= prevList.lines;\n            console.log(\"prevLines\", prevLines)\n            console.log(\"new lines inner\", newLines);\n            newLines[i].values === prevLines[k].values ? console.log(\"EVERYTHING SAME\") : console.log(\"IT CHANed\")\n          }) : console.log(\"no prev state yet\")\n        })\n      }\n    }\n\n\n  render() {\n    console.log(\"in render\",this.state);\n    return (\n      <div className={\"nba-container\"}>\n        <div className={\"row\"}>\n          <div className={\"col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12\"}>\n            <div className={\"grid-container\"}>\n            <div className={\"row league-row\"}>\n                <div className={\"col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6\"}>\n                  <div className={\"league-info\"}>\n                      <img className={\"league-logo\"} src={\"http://www.performgroup.com/wp-content/uploads/2015/10/nba-logo-png.png\"} alt={\"nba-logo\"}></img>\n              \n                  </div>\n                </div>\n                <div className={\"col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6\"}>\n                <a className={\"nbaRefresh\"} href='javascript:void(0)' onClick={this.getNbaData}><img className={\"nbaRefresh\"} src={\"../../../../images/refresh.png\"} alt={\"refresh\"}></img></a>\n                <div className={\"oddSelect-container\"}>\n      <select className={\"selector-dropdown\"} id={\"nbaSelectDD\"} value={this.state.value} onChange={this.handleChange} >\n        <option selected value=\"moneyline\">Moneyline</option>\n        <option value=\"spread\">Spread</option>\n        <option value=\"total\">Total</option>\n        {console.log(\"value state change NBA\", this.state)}\n        {/* {this.props = this.state.value} */}\n        {/* {console.log(\"props\", this.props)} */}\n      </select>\n      </div>\n\n                {/* <a className={\"refreshBut\"} href='javascript:void(0)' onClick={this.getNbaData}><img className={\"refreshBut\"} src={\"../../../../images/refresh.png\"} alt={\"refresh\"}></img></a> */}\n                </div>\n            </div>\n              <table className={\"table table-bordered\"}>\n                  <thead  className={\"headers-row\"}>\n                    <tr>\n                  <th>\n                  <span className={\"team-info\"}>Time</span>\n                  </th>\n                  <th>\n                    <span className={\"team-info\"}>Teams</span>\n                  </th>\n                    <th className={\"book-headers\"} id={\"fiveDimesHead\"}>\n                    <img src={\"../../../../images/5dimeslogo.png\"} className={\"bookie-logos\"} alt={\"5dimes-Logo\"}></img>\n                    </th>\n                    <th className={\"book-headers\"} id={\"pinnacleHead\"}>\n                    <img src={\"../../../../images/pinnacle-logo.png\"} className={\"bookie-logos\"} alt={\"Pinnacle-Logo\"}></img>\n                    </th>\n                    <th className={\"book-headers\"} id={\"bookmakerHead\"}>\n                    <img src={\"../../../../images/logo-bookmaker.png\"} className={\"bookie-logos\"} alt={\"Bookmaker-Logo\"}></img>\n                    </th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  {\n                        this.state.arrayOfEvents === undefined || this.state.arrayOfEvents.length ===0 ?\n                          <tr  className={\"loader\"}><td>Loading</td></tr> : this.state.value === \"moneyline\" && this.state.arrayOfEvents.map((index, i) => {\n                            return [\n                            <tr key={i}>\n                            <td className={\"live-time\"}>{index.date.event_date}</td>\n                            <td className={\"live-teams\"}><span className={\"marker\"}>Home: </span>{index.home.home_team}<br></br><span className={\"marker\"}>Away: </span>{index.away.away_team}</td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Moneyline-Home: </span>{index.lines[0].moneyline_home}<br></br><span className={\"marker\"}>Moneyline-Away: </span>{index.lines[0].moneyline_away}\n                              </td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Moneyline-Home: </span>{index.lines[1].moneyline_home}<br></br><span className={\"marker\"}>Moneyline-Away: </span>{index.lines[1].moneyline_away}\n                              </td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Moneyline-Home: </span>{index.lines[2].moneyline_home}<br></br><span className={\"marker\"}>Moneyline-Away: </span>{index.lines[2].moneyline_away}\n                              </td>                          \n                            </tr>  \n                            ]\n                          })\n                        }\n\n                      {\n                        this.state.arrayOfEvents === undefined || this.state.arrayOfEvents.length ===0 ?\n                          <tr  className={\"loader\"}><td>Loading</td></tr> : this.state.value === \"spread\" && this.state.arrayOfEvents.map((index, j) => {\n                            return [\n                              <tr key={j}>\n                              <td className={\"live-time\"}>{index.date.event_date}</td>\n                              <td className={\"live-teams\"}><span className={\"marker\"}>Home: </span>{index.home.home_team}<br></br><span className={\"marker\"}>Away: </span>{index.away.away_team}</td>\n                                <td className={\"live-open-line\"}><span className={\"marker\"}>Spread Home: </span>{index.lines[0].spread_home}<br></br><span className={\"marker\"}>Spread Away: </span>{index.lines[0].spread_away}\n                                </td>\n                                <td className={\"live-open-line\"}><span className={\"marker\"}>Spread Home: </span>{index.lines[1].spread_home}<br></br><span className={\"marker\"}>Spread Away: </span>{index.lines[1].spread_away}\n                                </td>\n                                <td className={\"live-open-line\"}><span className={\"marker\"}>Spread Home: </span>{index.lines[2].spread_home}<br></br><span className={\"marker\"}>Spread Away: </span>{index.lines[2].spread_away}\n                                </td>                          \n                              </tr>  \n                              ]\n                          })\n                        }\n\n                      {\n                        this.state.arrayOfEvents === undefined || this.state.arrayOfEvents.length ===0 ?\n                          <tr  className={\"loader\"}><td>Loading</td></tr> : this.state.value === \"total\" && this.state.arrayOfEvents.map((index, k) => {\n                            return [\n                            <tr key={k}>\n                            <td className={\"live-time\"}>{index.date.event_date}</td>\n                            <td className={\"live-teams\"}><span className={\"marker\"}>Home: </span>{index.home.home_team}<br></br><span className={\"marker\"}>Away: </span>{index.away.away_team}</td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Total: </span>{index.lines[0].total}\n                              </td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Total: </span>{index.lines[1].total}\n                              </td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Total: </span>{index.lines[2].total}\n                              </td>                          \n                            </tr>  \n                            ]\n                          })\n                        }\n                  </tbody>\n                </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Nba;","import React from \"react\";\nimport \"../Nhl/Nhl.css\";\nimport axios from \"axios\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\n\n\n\nclass Nhl extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state= {value: \"moneyline\",}\n    this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n      this.getNhlData();\n    }\n\n    getNhlData = () => {\n      axios.get(\"/api/nhl-odds\").then((res) => {\n        let arrayOfEvents = []\n        const parsed = JSON.parse(JSON.stringify(res)).data.body.events\n        console.log(\"parsed data\", parsed);\n        for (let i = 0; i < parsed.length; i++) {\n          const teamObject = {};\n          const linesObj = parsed[i].lines;\n          const linesArr = Object.values(linesObj);\n          const testVal = 0;\n          const dateParse = parsed[i].event_date;\n          const dateToFormat = new Date(dateParse);\n          // GETTING EVENT DATE FOR GAME\n           teamObject.date = {\n            event_date: <Moment format=\"MMM D, h:mm A\" date={dateToFormat} />\n          }\n          teamObject.test = {\n            testValue: testVal\n          }\n          for (let j = 0; j < linesArr.length; j++) {\n            teamObject.lines = [\n              {\n               affiliate: linesArr[0].affiliate.affiliate_name,\n               moneyline_away: linesArr[0].moneyline.moneyline_away,\n               moneyline_home: linesArr[0].moneyline.moneyline_home,\n               spread_away: linesArr[0].spread.point_spread_away,\n               spread_home: linesArr[0].spread.point_spread_home,\n               total: linesArr[0].total.total_over\n              },\n              {\n                affiliate: linesArr[1].affiliate.affiliate_name,\n                moneyline_away: linesArr[1].moneyline.moneyline_away,\n                moneyline_home: linesArr[1].moneyline.moneyline_home,\n                spread_away: linesArr[1].spread.point_spread_away,\n                spread_home: linesArr[1].spread.point_spread_home,\n                total: linesArr[1].total.total_over\n              },\n              {\n                affiliate: linesArr[4].affiliate.affiliate_name,\n                moneyline_away: linesArr[4].moneyline.moneyline_away,\n                moneyline_home: linesArr[4].moneyline.moneyline_home,\n                spread_away: linesArr[4].spread.point_spread_away,\n                spread_home: linesArr[4].spread.point_spread_home,\n                total: linesArr[4].total.total_over\n              },\n          ]\n            for (let k = 0; k < parsed[i].teams.length; k++) {\n            const isAway = parsed[i].teams[k].is_away;\n            const eachTeam = parsed[i].teams[k].name;  \n            // PUTTING TEAMS IN OBJ\n            isAway ? teamObject.away = {away_team: eachTeam} : teamObject.home = {home_team: eachTeam}\n          }\n        }\n          arrayOfEvents.push(teamObject)\n        }\n        this.setState({arrayOfEvents});\n      });\n    }\n\n    handleChange(event) {\n      this.setState({value: event.target.value});\n      event.preventDefault();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      const prevStateVals = []; \n      console.log(\"current state\", this.state.arrayOfEvents);\n      console.log(\"prev state\", prevState);\n      if (this.state.arrayOfEvents === prevState.arrayOfEvents) {\n        console.log(\"Everthing is the same\") \n      } else {\n        this.state.arrayOfEvents.map((eachList, i) => {\n          // console.log(\"each list\", eachList);\n          const newLines = eachList.lines;\n          // console.log(\"new lines\", newLines);\n          // const currentStateVals = liness.filter(function(liness)\n           prevState.arrayOfEvents ?  prevState.arrayOfEvents.map((prevList, k) => {\n            //  console.log(\"prev state inner\", prevState);\n            // console.log(\"prev list\", prevList);\n            const prevLines= prevList.lines;\n            // console.log(\"prevLines\", prevLines)\n            // console.log(\"new lines inner\", newLines);\n            // newLines[i].values === prevLines[k].values ? console.log(\"EVERYTHING SAME\") : console.log(\"SHIT CHANGED YO\")\n            \n            \n          }) : console.log(\"no prev state yet\")\n\n        })\n      }\n\n      \n    }\n\n  render() {\n    console.log(\"in render\",this.state);\n    return (\n      <div className={\"nhl-container\"}>\n        <div className={\"row\"}>\n          <div className={\"col-xs-12 col-sm-12 col-md-12 col-lg-12 col-xl-12\"}>\n            <div className={\"grid-container\"}>\n            <div className={\"row league-row\"}>\n                <div className={\"col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6\"}>\n                  <div className={\"league-info\"}>\n                      <img className={\"nhl-league-logo\"} src={\"http://thekingmaker.me/wp-content/uploads/2016/01/National-Hockey-League.png\"} alt={\"nhl_logo\"}></img>\n              \n                  </div>\n                </div>\n                <div className={\"col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6\"}>\n                <a className={\"nhlRefresh\"} href='javascript:void(0)' onClick={this.getNhlData}><img className={\"nhlRefresh\"} src={\"../../../../images/refresh.png\"} alt={\"refresh\"}></img></a>\n                <div className={\"oddSelect-container\"}>\n      <select className={\"selector-dropdown\"} id={\"nhlSelectDD\"} value={this.state.value} onChange={this.handleChange} >\n        <option selected value=\"moneyline\">Moneyline</option>\n        <option value=\"spread\">Spread</option>\n        <option value=\"total\">Total</option>\n        {console.log(\"value state change MLB\", this.state)}\n        {/* {this.props = this.state.value} */}\n        {/* {console.log(\"props\", this.props)} */}\n      </select>\n      </div>\n                </div>\n            </div>\n              <table className={\"table table-bordered\"}>\n                  <thead  className={\"headers-row\"}>\n                    <tr>\n                  <th>\n                  <span className={\"team-info\"}>Time</span>\n                  </th>\n                  <th>\n                    <span className={\"team-info\"}>Teams</span>\n                  </th>\n                    <th className={\"book-headers\"} id={\"fiveDimesHead\"}>\n                    <img src={\"../../../../images/5dimeslogo.png\"} className={\"bookie-logos\"} alt={\"5dimes-Logo\"}></img>\n                    </th>\n                    <th className={\"book-headers\"} id={\"pinnacleHead\"}>\n                    <img src={\"../../../../images/pinnacle-logo.png\"} className={\"bookie-logos\"} alt={\"Pinnacle-Logo\"}></img>\n                    </th>\n                    <th className={\"book-headers\"} id={\"bookmakerHead\"}>\n                    <img src={\"../../../../images/logo-bookmaker.png\"} className={\"bookie-logos\"} alt={\"Bookmaker-Logo\"}></img>\n                    </th>\n                  </tr>\n                  </thead>\n                  <tbody>\n                  {\n                        this.state.arrayOfEvents === undefined || this.state.arrayOfEvents.length ===0 ?\n                          <tr  className={\"loader\"}><td>Loading</td></tr> : this.state.value === \"moneyline\" && this.state.arrayOfEvents.map((index, i) => {\n                            return [\n                            <tr key={i}>\n                            <td className={\"live-time\"}>{index.date.event_date}</td>\n                            <td className={\"live-teams\"}><span className={\"marker\"}>Home: </span>{index.home.home_team}<br></br><span className={\"marker\"}>Away: </span>{index.away.away_team}</td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Moneyline-Home: </span>{index.lines[0].moneyline_home}<br></br><span className={\"marker\"}>Moneyline-Away: </span>{index.lines[0].moneyline_away}\n                              </td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Moneyline-Home: </span>{index.lines[1].moneyline_home}<br></br><span className={\"marker\"}>Moneyline-Away: </span>{index.lines[1].moneyline_away}\n                              </td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Moneyline-Home: </span>{index.lines[2].moneyline_home}<br></br><span className={\"marker\"}>Moneyline-Away: </span>{index.lines[2].moneyline_away}\n                              </td>                          \n                            </tr>  \n                            ]\n                          })\n                        }\n\n                      {\n                        this.state.arrayOfEvents === undefined || this.state.arrayOfEvents.length ===0 ?\n                          <tr  className={\"loader\"}><td>Loading</td></tr> : this.state.value === \"spread\" && this.state.arrayOfEvents.map((index, j) => {\n                            return [\n                              <tr key={j}>\n                              <td className={\"live-time\"}>{index.date.event_date}</td>\n                              <td className={\"live-teams\"}><span className={\"marker\"}>Home: </span>{index.home.home_team}<br></br><span className={\"marker\"}>Away: </span>{index.away.away_team}</td>\n                                <td className={\"live-open-line\"}><span className={\"marker\"}>Spread Home: </span>{index.lines[0].spread_home}<br></br><span className={\"marker\"}>Spread Away: </span>{index.lines[0].spread_away}\n                                </td>\n                                <td className={\"live-open-line\"}><span className={\"marker\"}>Spread Home: </span>{index.lines[1].spread_home}<br></br><span className={\"marker\"}>Spread Away: </span>{index.lines[1].spread_away}\n                                </td>\n                                <td className={\"live-open-line\"}><span className={\"marker\"}>Spread Home: </span>{index.lines[2].spread_home}<br></br><span className={\"marker\"}>Spread Away: </span>{index.lines[2].spread_away}\n                                </td>                          \n                              </tr>  \n                              ]\n                          })\n                        }\n\n                      {\n                        this.state.arrayOfEvents === undefined || this.state.arrayOfEvents.length ===0 ?\n                          <tr  className={\"loader\"}><td>Loading</td></tr> : this.state.value === \"total\" && this.state.arrayOfEvents.map((index, k) => {\n                            return [\n                            <tr key={k}>\n                            <td className={\"live-time\"}>{index.date.event_date}</td>\n                            <td className={\"live-teams\"}><span className={\"marker\"}>Home: </span>{index.home.home_team}<br></br><span className={\"marker\"}>Away: </span>{index.away.away_team}</td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Total: </span>{index.lines[0].total}\n                              </td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Total: </span>{index.lines[1].total}\n                              </td>\n                              <td className={\"live-open-line\"}><span className={\"marker\"}>Total: </span>{index.lines[2].total}\n                              </td>                          \n                            </tr>  \n                            ]\n                          })\n                        }\n                  </tbody>\n                </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Nhl","import React from \"react\";\nimport \"../Lander/Lander.css\";\n\n\nclass Lander extends React.Component {\n    state = {\n     data: null\n    }\n\n\n  render() {\n    return (\n    <div className={\"lander-container\"}>\n     <div className={\"text-container\"}>\n      <div className={\"txt-column\"}>\n        <ul>\n            <li>Live Market Odds from Vegas and Offshore</li>\n            <li>Live Market Breakdown from Vegas' Top Sports Analysts</li>\n            <li>Exclusive Selections from the Industry's Most Respected Handicappers</li>\n            <li>Exclusive Handicapping Library and Research Department</li>\n        </ul>\n      </div>\n     </div>\n     <div className={\"video-container\"}>\n      <iframe src=\"https://www.youtube-nocookie.com/embed/_Dgs8R3isnE?controls=0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n     </div>\n    </div>\n    );\n  }\n}\n\nexport default Lander","import React from \"react\";\nimport \"../Home/Home.css\";\n// import axios from \"axios\";\n\n\nclass Home extends React.Component {\n\n  getYear() {\n    return new Date().getFullYear();\n  }\n\n  render() {\n    return (\n      <div className={\"col-xs-12 col-s-12 col-md-12 col-lg-12 col-xl-12\"}>\n        <div className={\"home-cont\"}>\n            <h1>Click a Link On Odds Above to Display Live Odds</h1>\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\n// import OddsSelect from \"./components/OddsSelect\";\nimport Mlb from \"./components/Mlb\";\nimport Nba from \"./components/Nba\";\nimport Nhl from \"./components/Nhl\";\nimport Footer from \"./components/Footer\";\nimport Home from \"./components/Home\";\nimport Lander from \"./components/Lander\"\n\n// import NoMatch from \"./components/NoMatch\";\n\nclass App extends Component {\n  state = {\n    data: null\n  };\n\n//   componentDidMount() {\n//     // Call our fetch function below once the component mounts\n//   this.callBackendAPI()\n//     .then(res => this.setState({ data: res.express }))\n//     .catch(err => console.log(err));\n// }\n\n// Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n// callBackendAPI = async () => {\n//   const response = await fetch('/express_backend');\n//   const body = await response.json();\n\n//   if (response.status !== 200) {\n//     throw Error(body.message) \n//   }\n//   return body;\n// };\n\n\n  render() {\n    return (\n    <div className=\"App\">\n    <Router>\n    <Route path=\"/\" component={Header} />\n    <Route exact path=\"/\" component={Lander} />\n        {/* <Route exact path=\"/odds\" render={props => \n          <div>\n            <Mlb/>\n            <Nba />\n            <Nhl />\n          </div>\n        } /> */}\n        {/* <Route exact path=\"/odds/MLB\" component={Mlb} />\n        <Route exact path=\"/odds/NBA\" component={Nba} />\n        <Route exact path=\"/odds/NHL\" component={Nhl} /> */}\n        <Route path=\"/\" component={Footer} />\n        {/* <Route component={NoMatch} /> */}\n    </Router>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}